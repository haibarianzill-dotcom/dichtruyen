// T·∫°o user_id n·∫øu ch∆∞a c√≥
function getCookie(name) {
    let value = "; " + document.cookie;
    let parts = value.split("; " + name + "=");
    if (parts.length === 2) return parts.pop().split(";").shift();
}

let user_id = getCookie('user_id');
if (!user_id) {
    user_id = 'user_' + Date.now();
    document.cookie = `user_id=${user_id}; path=/; max-age=31536000`; // L∆∞u 1 nƒÉm
}

let chapters = [];
let translated = {};

// T·∫£i n·ªôi dung
async function loadContent() {
    const formData = new FormData();
    const file = document.getElementById('fileInput').files[0];
    const text = document.getElementById('textInput').value;

    if (file) formData.append('file', file);
    else formData.append('text', text);

    const res = await fetch('/upload', { method: 'POST', body: formData });
    chapters = await res.json();
    renderChapters();
    loadProgress(); // T·∫£i ti·∫øn tr√¨nh sau khi c√≥ ch∆∞∆°ng
}

// Render danh s√°ch ch∆∞∆°ng
function renderChapters() {
    const container = document.getElementById('chapters');
    container.innerHTML = '<h4>üìö C√°c ch∆∞∆°ng</h4>';
    
    if (chapters.length === 0) {
        container.innerHTML += '<p class="text-muted">Ch∆∞a c√≥ ch∆∞∆°ng n√†o.</p>';
        return;
    }

    chapters.forEach((chap, i) => {
        const transText = translated[i]
            ? (translated[i].length > 100 ? translated[i].substring(0, 100) + '...' : translated[i])
            : '[Ch∆∞a d·ªãch]';
        const color = translated[i] ? '#0056b3' : '#6c757d';
        const elId = `trans-${i}`;

        const div = document.createElement('div');
        div.innerHTML = `
          <div class="card mb-2">
            <div class="card-body">
              <h6>${chap.title}</h6>
              <div><small><strong>D·ªãch:</strong> <span id="${elId}" style="color:${color}">${transText}</span></small></div>
            </div>
          </div>`;
        container.appendChild(div);
    });
    updateProgress();
}

// T·∫£i ti·∫øn tr√¨nh d·ªãch t·ª´ server
async function loadProgress() {
    try {
        const res = await fetch('/status');
        const session = await res.json();
        translated = session.translated || {};
        renderChapters(); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
    } catch (e) {
        console.error("Kh√¥ng th·ªÉ t·∫£i ti·∫øn tr√¨nh:", e);
        document.getElementById('progress').innerHTML = '‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i ti·∫øn tr√¨nh.';
    }
}

// C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
function updateProgress() {
    const total = chapters.length;
    const done = Object.keys(translated).length;
    document.getElementById('progress').innerHTML = 
        `<b>‚úÖ ƒê√£ d·ªãch: ${done}/${total} ch∆∞∆°ng</b>`;
}

// D·ªãch kho·∫£ng ch∆∞∆°ng ƒë√£ ch·ªçn
async function translateRange() {
    const start = parseInt(document.getElementById('startChapter').value);
    const end = parseInt(document.getElementById('endChapter').value);
    const apiKeys = document.getElementById('apiKeys').value;
    const prompt = document.getElementById('prompt').value;

    if (start < 1 || end < start) {
        alert("Vui l√≤ng ch·ªçn kho·∫£ng ch∆∞∆°ng h·ª£p l·ªá!");
        return;
    }

    const res = await fetch('/translate-range', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ start, end, api_keys: apiKeys, prompt })
    });

    const data = await res.json();
    if (data.status === 'success') {
        alert(`‚úÖ ƒê√£ d·ªãch th√™m ${data.translated_count} ch∆∞∆°ng!`);
        loadProgress(); // T·∫£i l·∫°i ti·∫øn tr√¨nh ngay
    } else {
        alert("‚ùå L·ªói khi d·ªãch.");
    }
}

// Xu·∫•t file EPUB
async function exportEpub() {
    if (Object.keys(translated).length === 0) {
        alert("Ch∆∞a c√≥ ch∆∞∆°ng n√†o ƒë∆∞·ª£c d·ªãch!");
        return;
    }

    const title = prompt("Nh·∫≠p t√™n truy·ªán:", "Truy·ªán ƒë√£ d·ªãch") || "Truy·ªán ƒë√£ d·ªãch";
    const data = {
        title,
        author: "D·ªãch b·ªüi Gemini",
        chapters: chapters.map((chap, i) => ({
            title: chap.title,
            content: translated[i] || chap.content
        }))
    };

    try {
        const res = await fetch('/export-epub', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        const json = await res.json();
        const a = document.createElement('a');
        a.href = json.url;
        a.download = `${title}.epub`;
        a.click();
    } catch (e) {
        alert("L·ªói khi xu·∫•t EPUB: " + e.message);
    }
}

// T·ª± ƒë·ªông t·∫£i ti·∫øn tr√¨nh khi trang m·ªü
document.addEventListener("DOMContentLoaded", () => {
    loadProgress(); // Lu√¥n t·∫£i ti·∫øn tr√¨nh khi v√†o trang
});
